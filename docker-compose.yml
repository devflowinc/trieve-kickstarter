services:
  db:
    image: postgres:15
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: trieve
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    image: redis:7.2.2
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "thisredispasswordisverysecureandcomplex", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --requirepass thisredispasswordisverysecureandcomplex

  qdrant-database:
    image: qdrant/qdrant:v1.9.1
    container_name: qdrant-database
    environment:
      - QDRANT__SERVICE__API_KEY=qdrant_pass
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app-network

  s3:
    image: minio/minio:RELEASE.2023-09-27T15-22-50Z
    container_name: s3
    ports:
      - 9000:9000
      - 42625:42625
    environment:
      - MINIO_ROOT_USER=rootuser
      - MINIO_ROOT_PASSWORD=rootpassword
    healthcheck:
      test: ["CMD", "curl", "-f", "http://s3:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - s3-data:/data
    command: server --console-address ":42625" /data
    networks:
      - app-network

  s3-client:
    image: minio/mc
    container_name: s3-client
    depends_on:
      s3:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      mc config host add myminio http://s3:9000 rootuser rootpassword;
      mc alias set myminio http://s3:9000 rootuser rootpassword;

      mc admin user add myminio ZaaZZaaZZaaZZaaZZaaZ ssssssssssssssssssssTTTTTTTTTTTTTTTTTTTT;
      mc admin policy attach myminio readwrite --user ZaaZZaaZZaaZZaaZZaaZ;

      mc mb myminio/trieve;


      exit 0;
      "

  tika:
    image: apache/tika:2.9.1.0-full
    container_name: tika
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- -S 'http://tika:9998/version' 2>&1 | grep 'HTTP/' | awk '{print $2}' | grep 200 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network
    ports:
      - 9998:9998

  server:
    image: trieve/server
    container_name: server
    build:
      context: ./server/
      dockerfile: Dockerfile.no-ocr
    depends_on:
      tika:
        condition: service_healthy
      db:
        condition: service_healthy
      qdrant-database:
        condition: service_started
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    network_mode: "host"
    restart: always
    environment:
      - ADMIN_API_KEY=admin
      - BASE_SERVER_URL=localhost:8090
      - REDIS_URL=redis://:thisredispasswordisverysecureandcomplex@localhost:6379
      - QDRANT_URL=http://localhost:6334
      - QDRANT_API_KEY=qdrant_pass
      - DATABASE_URL=postgres://postgres:password@localhost:5432/trieve
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_API_KEY=${LLM_API_KEY}
      - SECRET_KEY=01234012340123401234012340123401234012340123401234012340123401234012340123401234
      - SALT=goodsaltisveryyummy
      - S3_ENDPOINT=http://localhost:9000
      - S3_ACCESS_KEY=ZaaZZaaZZaaZZaaZZaaZ
      - S3_SECRET_KEY=ssssssssssssssssssssTTTTTTTTTTTTTTTTTTTT
      - S3_BUCKET=trieve
      - COOKIE_SECURE=false
      - TIKA_URL=http://localhost:9998
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - STRIPE_SECRET=${STRIPE_SECRET-sk_test}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET-whsec_}
      - ADMIN_DASHBOARD_URL=localhost:8080/admin
      - OIDC_CLIENT_SECRET=YllmLDTy67MbsUBrUAWvQ7z9aMq0QcKx
      - OIDC_CLIENT_ID=vault
      - OIDC_AUTH_REDIRECT_URL=http://localhost:8080/realms/trieve/protocol/openid-connect/auth
      - OIDC_ISSUER_URL=http://localhost:8080/realms/trieve
      - SPARSE_SERVER_QUERY_ORIGIN=${SPARSE_SERVER_QUERY_ORIGIN-http://localhost:5000}
      - SPARSE_SERVER_DOC_ORIGIN=${SPARSE_SERVER_QUERY_ORIGIN-http://localhost:4000}
      - EMBEDDING_SERVER_ORIGIN=${EMBEDDING_SERVER_ORIGIN-http://locahost:6000}
      - EMBEDDING_SERVER_ORIGIN_BGEM3=${EMBEDDING_SERVER_ORIGIN_BGEM3-http://locahost:7000}
      - RERANKER_SERVER_ORIGIN=${RERANKER_SERVER_ORIGIN-http://localhost:8000}
      - UNLIMITED=true
      - REDIS_CONNECTIONS=30

  ingestion-worker:
    image: trieve/ingest
    container_name: ingestion-worker
    build:
      context: ./server/
      dockerfile: Dockerfile.ingestion-worker
    restart: always
    network_mode: "host"
    depends_on:
      tika:
        condition: service_healthy
      db:
        condition: service_healthy
      qdrant-database:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - ADMIN_API_KEY=admin
      - BASE_SERVER_URL=localhost:8090
      - REDIS_URL=redis://:thisredispasswordisverysecureandcomplex@localhost:6379
      - QDRANT_URL=http://localhost:6334
      - QDRANT_API_KEY=qdrant_pass
      - DATABASE_URL=postgres://postgres:password@localhost:5432/trieve
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_API_KEY=${LLM_API_KEY}
      - SECRET_KEY=01234012340123401234012340123401234012340123401234012340123401234012340123401234
      - SALT=goodsaltisveryyummy
      - S3_ENDPOINT=http://localhost:9000
      - S3_ACCESS_KEY=ZaaZZaaZZaaZZaaZZaaZ
      - S3_SECRET_KEY=ssssssssssssssssssssTTTTTTTTTTTTTTTTTTTT
      - S3_BUCKET=trieve
      - COOKIE_SECURE=false
      - TIKA_URL=http://localhost:9998
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - STRIPE_SECRET=${STRIPE_SECRET-sk_test}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET-whsec_}
      - ADMIN_DASHBOARD_URL=localhost:8080/admin
      - OIDC_CLIENT_SECRET=YllmLDTy67MbsUBrUAWvQ7z9aMq0QcKx
      - OIDC_CLIENT_ID=vault
      - OIDC_AUTH_REDIRECT_URL=http://localhost:8080/realms/trieve/protocol/openid-connect/auth
      - OIDC_ISSUER_URL=http://localhost:8080/realms/trieve
      - SPARSE_SERVER_QUERY_ORIGIN=${SPARSE_SERVER_QUERY_ORIGIN-http://localhost:5000}
      - SPARSE_SERVER_DOC_ORIGIN=${SPARSE_SERVER_QUERY_ORIGIN-http://localhost:4000}
      - EMBEDDING_SERVER_ORIGIN=${EMBEDDING_SERVER_ORIGIN-http://locahost:6000}
      - EMBEDDING_SERVER_ORIGIN_BGEM3=${EMBEDDING_SERVER_ORIGIN_BGEM3-http://locahost:7000}
      - RERANKER_SERVER_ORIGIN=${RERANKER_SERVER_ORIGIN-http://localhost:8000}
      - UNLIMITED=true
      - REDIS_CONNECTIONS=30

  file-worker:
    image: trieve/file_worker
    container_name: file-worker
    build:
      context: ./server/
      dockerfile: Dockerfile.file-worker
    restart: always
    network_mode: "host"
    depends_on:
      tika:
        condition: service_healthy
      db:
        condition: service_healthy
      qdrant-database:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - ADMIN_API_KEY=admin
      - BASE_SERVER_URL=localhost:8090
      - REDIS_URL=redis://:thisredispasswordisverysecureandcomplex@localhost:6379
      - QDRANT_URL=http://localhost:6334
      - QDRANT_API_KEY=qdrant_pass
      - DATABASE_URL=postgres://postgres:password@localhost:5432/trieve
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_API_KEY=${LLM_API_KEY}
      - SECRET_KEY=01234012340123401234012340123401234012340123401234012340123401234012340123401234
      - SALT=goodsaltisveryyummy
      - S3_ENDPOINT=http://localhost:9000
      - S3_ACCESS_KEY=ZaaZZaaZZaaZZaaZZaaZ
      - S3_SECRET_KEY=ssssssssssssssssssssTTTTTTTTTTTTTTTTTTTT
      - S3_BUCKET=trieve
      - COOKIE_SECURE=false
      - TIKA_URL=http://localhost:9998
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - STRIPE_SECRET=${STRIPE_SECRET-sk_test}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET-whsec_}
      - ADMIN_DASHBOARD_URL=localhost:8080/admin
      - OIDC_CLIENT_SECRET=YllmLDTy67MbsUBrUAWvQ7z9aMq0QcKx
      - OIDC_CLIENT_ID=vault
      - OIDC_AUTH_REDIRECT_URL=http://localhost:8080/realms/trieve/protocol/openid-connect/auth
      - OIDC_ISSUER_URL=http://localhost:8080/realms/trieve
      - SPARSE_SERVER_QUERY_ORIGIN=${SPARSE_SERVER_QUERY_ORIGIN-http://localhost:5000}
      - SPARSE_SERVER_DOC_ORIGIN=${SPARSE_SERVER_QUERY_ORIGIN-http://localhost:4000}
      - EMBEDDING_SERVER_ORIGIN=${EMBEDDING_SERVER_ORIGIN-http://locahost:6000}
      - EMBEDDING_SERVER_ORIGIN_BGEM3=${EMBEDDING_SERVER_ORIGIN_BGEM3-http://locahost:7000}
      - RERANKER_SERVER_ORIGIN=${RERANKER_SERVER_ORIGIN-http://localhost:8000}
      - UNLIMITED=true
      - REDIS_CONNECTIONS=30

  chat:
    image: trieve/chat
    container_name: chat
    build: ./chat/
    networks:
      - app-network
    ports:
      - 5175:80
    environment:
      - VITE_API_HOST=http://localhost:8090/api
      - VITE_SEARCH_UI_URL=http://localhost:5174

  search:
    image: trieve/search
    container_name: search
    build: ./search/
    networks:
      - app-network
    ports:
      - 5174:80
    environment:
      - VITE_API_HOST=http://localhost:8090/api

  dashboard:
    image: trieve/dashboard
    container_name: dashboard
    build: ./dashboard/
    networks:
      - app-network
    ports:
      - 5173:80
    environment:
      - VITE_API_HOST=http://localhost:8090/api
      - VITE_SEARCH_UI_URL=http://localhost:5174
      - VITE_CHAT_UI_URL="http://localhost:5175"

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=aintsecure
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=password
      - KC_HEALTH_ENABLED=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3",
        ]
      interval: 10s
      timeout: 5s
      retries: 20 # Account for keycloak db starting up and taking time.
    entrypoint: "/opt/keycloak/bin/kc.sh start-dev --import-realm --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false"
    volumes:
      - keycloak-data:/opt/keycloak/data
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./keycloak/themes/trieve:/opt/keycloak/themes/treive
    ports:
      - 8080:8080
    networks:
      - app-network

  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pg-keycloak-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  script-redis-data:
  pgdata:
  qdrant_data:
  s3-data:
  keycloak-data:
  pg-keycloak-data:

